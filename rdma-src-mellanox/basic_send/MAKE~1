#if HAVE_CONFIG_H
#  include <config.h>
#endif /* HAVE_CONFIG_H */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netdb.h>
#include <malloc.h>
#include <getopt.h>
#include <arpa/inet.h>
#include <time.h>
#include <infiniband/verbs.h>



static void usage(const char *argv0)
{
	printf("Usage:\n");
	printf("  %s <host>     connect to server at <host>\n", argv0);
	printf("\n");
	printf("Options:\n");
	printf("  -d, --dev-name=<dev>   use  device <dev>)\n");
	printf("  -i, --dev_port=<port>  use port <port> of device (default 1)\n");
}

int main(int argc, char *argv[]) {
		char                    *devname = NULL;
	int                      dev_port = 1;


	static struct option long_options[] = {
		{ .name = "dev-name",   .has_arg = 1, .val = 'd' },
		{ .name = "dev-port",  .has_arg = 1, .val = 'i' },
	};


	while (1) {
		int c;

		c = getopt_long(argc, argv, "p:d:i:",
				long_options, NULL);
		if (c == -1)
			break;

		switch (c) {
		case 'd':
			devname = strdup(optarg);
			break;

		case 'i':
			dev_port = strtol(optarg, NULL, 0);
			if (dev_port < 0) {
				usage(argv[0]);
				return 1;
			}
			break;

		default:
			usage(argv[0]);
			return 1;
		}
	}

	struct ibv_context	*context = NULL;


	struct ibv_device **dev_list = ibv_get_device_list(NULL);
	if (!dev_list) {
		perror("Failed to get RDMA devices list");
		return 1;
	}

	for (int i = 0; dev_list[i]; ++i)
		if (!strcmp(ibv_get_device_name(dev_list[i]), devname))
			break;


	struct ibv_device *device  = dev_list[i];
	if (!device) {
		fprintf(stderr, "RDMA device %s not found\n", devname);
		return 1;
	}

	struct ibv_context *context = ibv_open_device(device);
	if (!context) {
		fprintf(stderr, "Couldn't get context for %s\n",
			ibv_get_device_name(device));
		return 1;
	}

        struct ibv_pd *pd = ibv_alloc_pd(ctx->context);
	if (!ctx->pd) {
		fprintf(stderr, "Couldn't allocate PD\n");
		goto clean_comp_channel;
	}








	return 0;
}





